#!/usr/bin/php
<?php
/**
 * This is a script to fetch the current ISO-3166 country definitions and
 * update Horde's country list file in Horde/Nls/Countries.php in an
 * interactive way.
 *
 * ** This script needs to be run from the base Horde directory. **
 *
 * The source for the country list is the International Organization for
 * Standardization (http://iso.org).
 *
 * Copyright 2004-2016 The Horde Project (http://www.horde.org/)
 *
 * See the enclosed file COPYING for license information (GPL). If you
 * did not receive this file, see http://www.fsf.org/copyleft/gpl.html.
 *
 * @category Horde
 * @package  maintainer_tools
 * @author   Marko Djukic <marko@oblo.com>
 * @author   Jan Schneider <jan@horde.org>
 *
 * @todo  Would be good to expand this to fetch also ISO-3166-2 lists from
 *        somewhere for lists of countries' regions/states.
 */

$baseFile = getcwd() . '/lib/Application.php';
if (file_exists($baseFile)) {
    require_once $baseFile;
} else {
    require_once 'PEAR/Config.php';
    require_once PEAR_Config::singleton()
        ->get('horde_dir', null, 'pear.horde.org') . '/lib/Application.php';
}
Horde_Registry::appInit('horde', array(
    'authentication' => 'none',
    'cli' => true
));

/* Location on ISO website where to fetch the updates from. */
$url = 'https://raw.githubusercontent.com/datasets/country-list/master/data.csv';

/* Update Horde's file. */
$countries = new Countries($url);
$updated = $countries->update();
if ($updated == false) {
    /* Nothing found to update. */
    $cli->writeln('Nothing to update. Exiting.');
    exit;
}

/* Save the new file. */
$countries->save();
exit;

class Countries
{
    protected $_old_data = array();
    protected $_new_data = array();
    protected $_url;

    /**
     * Constructor
     */
    public function __construct($url)
    {
        $this->_url = $url;
        $this->_loadOld();
        $this->_loadNew();
    }

    public function update()
    {
        global $cli;

        $accept_all = false;
        $updated = false;
        foreach ($this->_new_data as $code => $name) {
            if ($accept_all == true) {
                /* Auto accept activated just select all auto names. */
                $this->_new_data[$code] = $name;
            } elseif (isset($this->_old_data[$code]) &&
                      $this->_old_data[$code] == $name) {
                /* Old name matches new name so assume no changes. */
                $this->_new_data[$code] = $this->_old_data[$code];
            } else {
                $new_name = $name;
                if (isset($this->_old_data[$code])) {
                    /* There is an existing old name, show the two versions. */
                    $old = $cli->red($this->_old_data[$code]);
                    $cli->writeln(sprintf('Old name: %s', $old));
                    $new = $cli->green($new_name);
                    $cli->writeln(sprintf('New name: %s', $new));
                }
                /* Prompt for a new country name. */
                $accept = $cli->prompt(
                    sprintf(
                        'New country name for "%s", convert to: "%s"?',
                        $this->_old_data[$code],
                        $new_name
                    ),
                    array('y' => 'Yes', 'n' => 'No', 'a' => 'Accept All')
                );
                if ($accept == 'n') {
                    /* User does not accept auto name, ask for input. */
                    $new_name = $cli->prompt('Enter the new name: ', true);
                } elseif ($accept == 'a') {
                    /* User asked to accept all, flag it. */
                    $accept_all = true;
                }
                $updated = true;
                $this->_new_data[$code] = $new_name;
            }
        }

        return $updated;
    }

    public function save()
    {
        global $cli;

        $filename = 'Horde/Nls/Countries.php';
        if (!$fp = fopen($filename, 'r+', true)) {
            $cli->fatal(sprintf('Cannot open file %s.', $filename));
        }
        $new_file = '';
        while (!feof($fp) && $line = fgets($fp)) {
            $new_file .= $line;
            if ($line == "\$countries = array(\n") {
                break;
            }
        }
        $_new_data = array();
        foreach ($this->_new_data as $code => $name) {
            $_new_data[] = sprintf('    \'%s\' => Horde_Nls_Translation::t("%s")', $code, $name);
        }
        $new_file .= implode(",\n", $_new_data) . "\n";
        while (!feof($fp) && $line = fgets($fp)) {
            if (substr($line, 0, 4) == '    ') {
                continue;
            }
            $new_file .= $line;
        }

        /* Save the new file. */
        fseek($fp, 0);
        if (!ftruncate($fp, 0)) {
            $cli->fatal(sprintf('Cannot truncate file %s.', $filename));
        }
        if (!fwrite($fp, $new_file)) {
            $cli->fatal(sprintf('Cannot write file %s.', $filename));
        }
        fclose($fp);

        $cli->writeln('Success, saved new country data.');
    }

    protected function _loadOld()
    {
        include 'Horde/Nls/Countries.php';
        $this->_old_data = $countries;
    }

    protected function _loadNew()
    {
        global $cli;

        $new_file = $this->_readURL($this->_url);
        fgetcsv($new_file);
        $this->_new_data = array();
        while (!feof($new_file) && $line = fgetcsv($new_file)) {
            $this->_new_data[$line[1]] = $line[0];
        }
    }

    protected function _readURL()
    {
        global $injector;

        $response = $injector
            ->getInstance('Horde_Http_Client')
            ->get($this->_url);
        if ($response->code != 200) {
            throw new Exception(sprintf('Could not open %s.', $this->_url));
        }

        return $response->getStream();
    }

}
