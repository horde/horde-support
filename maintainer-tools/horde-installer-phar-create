#!@php_bin@
<?php
/**
 * Create the Phar Horde installer.
 *
 * @author    Michael Slusarz <slusarz@horde.org>
 * @category  Horde
 * @copyright 2013 Horde LLC
 * @package   maintainer_tools
 */

class HordeCreatePharInstaller
{
    const COMPOSER_DOWNLOAD = 'http://getcomposer.org/composer.phar';

    private $_base;
    private $_build;

    public function __construct()
    {
        if (ini_get('phar.readonly')) {
            throw new Exception("ERROR: Need to disable phar.readonly php.ini setting.");
        }

        $this->_base = dirname(__FILE__) . '/installer';
        $this->_build = sys_get_temp_dir() . '/' . mt_rand();

        register_shutdown_function(array($this, 'shutdown'));

        print "TEMP DIR: " . $this->_build . "\n";

        mkdir($this->_build);
    }

    public function create()
    {
        /* Copy base files to temp directory. */
        $i = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator(
                $this->_base,
                FilesystemIterator::SKIP_DOTS
            )
        );

        foreach ($i as $val) {
            if ($val->isFile()) {
                copy(
                    $val->getRealPath(),
                    $this->_build . '/' . $val->getFilename()
                );
            } elseif ($val->isDir()) {
                mkdir($this->_build . '/' . $val->getFilename());
            }
        }

        /* Get latest composer. */
        if (file_exists('./composer.phar')) {
            system('php ./composer.phar self-update');
        } else {
            file_put_contents(
                'composer.phar',
                file_get_contents(self::COMPOSER_DOWNLOAD)
            );
        }

        /* Install dependencies. */
        system('php ./composer.phar -d=' . $this->_build . ' install');

        /* Build Phar file. */
        @unlink('horde-installer.phar');
        $phar = new Phar('horde-installer.phar');
        $phar->setSignatureAlgorithm(Phar::SHA1);

        $phar->startBuffering();

        $i = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($this->_build)
        );

        foreach ($i as $val) {
            if ($val->isDir()) {
                continue;
            }

            $realpath = $val->getRealPath();
            $pharpath = str_replace($this->_build . '/', '', $realpath);

            print "ADDING: " . $pharpath . "\n";

            switch ($val->getFilename()) {
            case 'Translation.php':
                /* Fix @data_dir@. */
                $phar->addFromString(
                    $pharpath,
                    preg_replace(
                        '/self::\$_directory =.*;/',
                        'self::$_directory = preg_replace(\'/\/Horde\/.*$/\', \'/data/locale\', __FILE__);',
                        file_get_contents($realpath)
                    )
                );
                break;

            default:
                $phar->addFile($realpath, $pharpath);
                break;
            }
        }

        $phar->setStub(
            '<?php ' .
            'if (!extension_loaded("zlib")) { exit("The installer requires the zlib library to be compiled into PHP."); }' .
            'Phar::mapPhar("installer.phar");' .
            'require "phar://installer.phar/installer.php";' .
            '__HALT_COMPILER(); ?>'
        );

        $phar->stopBuffering();

        $phar->compressFiles(Phar::GZ);
    }

    public function shutdown()
    {
        $i = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator(
                $this->_build,
                FilesystemIterator::SKIP_DOTS
            ),
            RecursiveIteratorIterator::CHILD_FIRST
        );

        foreach ($i as $val) {
            if ($val->isFile()) {
                unlink($val->getRealPath());
            } else {
                rmdir($val->getRealPath());
            }
        }

        rmdir($this->_build);

        print "REMOVED TEMP DIR: " . $this->_build . "\n";
    }

}

$create = new HordeCreatePharInstaller();
$create->create();
