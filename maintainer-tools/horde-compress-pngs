#!@php_bin@
<?php
/**
 * Script to recursively find all PNG's in a directory and attempt to max
 * compress them.
 *
 * ZopfliPNG = https://code.google.com/p/zopfli/
 *
 * Copyright 2011-2014 Horde LLC (http://www.horde.org/)
 *
 * See the enclosed file COPYING for license information (LGPL). If you
 * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html.
 *
 * @author    Michael Slusarz <slusarz@horde.org>
 * @category  Horde
 * @copyright 2011-2014 Horde LLC
 * @license   http://www.fsf.org/copyleft/lgpl.html LGPL
 * @package   maintainer_tools
 */

require_once 'Horde/Autoloader/Default.php';

$parser = new Horde_Argv_Parser(array(
    'usage' => "%prog\n\t--advpng=path\n\t[--directory=path]\n\t--optipng=path\n\t--pngout=path\n\t[--zopflipng=path]",
    'optionList' => array(
        new Horde_Argv_Option('-a', '--advpng', array(
            'help' => 'Location of advpng binary'
        )),
        new Horde_Argv_Option('-d', '--directory', array(
            'default' => getcwd(),
            'help' => 'Directory to recursively parse'
        )),
        new Horde_Argv_Option('-o', '--optipng', array(
            'help' => 'Location of optipng binary'
        )),
        new Horde_Argv_Option('-p', '--pngout', array(
            'help' => 'Location of pngout binary'
        )),
        new Horde_Argv_Option('-z', '--zopflipng', array(
            'help' => 'Location of zopflipng binary [OPTIONAL]'
        ))
    )
));
list($args,) = $parser->parseArgs();

if (empty($args->advpng) || empty($args->optipng) || empty($args->pngout)) {
    $parser->parserError("Invalid arguments.");
}

$it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($args->directory, RecursiveIteratorIterator::SELF_FIRST));
while ($it->valid()) {
    if ($it->isFile() &&
        (strcasecmp('.png', substr($it->key(), -4)) === 0)) {
        print "FILE: {$it->key()}\n";

        $start_size = $it->getSize();
        copy($it->key(), $it->key() . '.bak');

        system($args->advpng . ' -z4 -q ' . $it->key());
        system($args->pngout . ' ' . $it->key() . ' -y -q');

        if (!empty($args->zopfli)) {
            exec($args->zopfli . ' -m ' . $it->key() . ' ' . $it->key() . '.out');
            unlink($it->key());
            rename($it->key() . '.out', $it->key());
        }

        system($args->advpng . ' -z4 -q ' . $it->key());
        system($args->optipng . ' -zc1-9 -zm1-9 -zs0-3 -f0-5 -quiet ' . $it->key());
        system($args->pngout . ' ' . $it->key() . ' -y -q');

        clearstatcache();
        $end_size = $it->getSize();

        if ($start_size > $end_size) {
            print $it->key() . ":\n" .
                  '    ' . $start_size . ' => ' . $end_size . ' (' . round((($start_size - $end_size) / $start_size) * 100, 1) . "%)\n";
            unlink($it->key() . '.bak');
        } else {
            unlink($it->key());
            rename($it->key() . '.bak', $it->key());
        }
    }
    $it->next();
}
